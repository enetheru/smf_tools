img_w, img_h
tileCache
tileMap
dest_tw, dest_th
src_th, src_th (auto)
filer
tiledImage
tilecountX, tilecountY

Destination must have:
tilesize[x,y]
imagesize[w,h]
tileMap
and can export to image[s] or tilemap

new option output as smt


the idea is that we build a tiledimage from the input parameters
from there we pull information from the tiled image to generate either an smt+csv
or push images with csv

pretty much always output the csv

== SOURCE PARAMETERS ==
=== INPUTS ===
* tiles/smt's
* tilemap
* filter
map_width = sqrt( filter.size() ) || tilemap.width.
map_height = sqrt( filter.size() ) || tilemap.height
tile_width = smt.tileWidth || tilecache.getOriginal( 0 ).width
tile_height = smt.tileHeight || tilecache.getTile( 0 ).height
image_width = map_width * tile_width
image_height = map_height * tile_height
^^ this creates the tiledImage ^^

DESTINATION PARAMETERS
=== INPUTS ===
* --tilesize
* --imagesize
we want to generate a tilemap and a set of images, or an smt file
out_image_width = --imagesize.width
out_image_height = --imagesize.width
out_tile_width = --tilesize.width
out_tile_height = --tilesize.height
out_map_width = out_image_width / out_tile_width
out_map_height = out_image_height / out_tile_height

TERMINOLOGY
===========
when thinking about a map from the perspective:
* That it's a 'room'
  4 walls,floor,ceiling.
  length(z), breadth(x), depth(y) (floor(min y), ceiling(max y))
* source images
  width(x), height(z), depth(y)


SOURCE KEYWORDS
===============
* REMOVE
* FIXME
* BUG
* TODO
* TEMP

RANDOM TODO ITEMS
=================
* Comb through the command line options for each application for consistency
  glaring problems are with smt_repair, and the inconsistent mapwidth/height
  throughout the source.
* consider renaming all occurrences of --imagesize to --scalesize to denote the
  output scaling factor.
* consider renaming all occurrences of --tilesize to --splitsize to denote
  splitting factor, except in this case when the path of simply translating
  tiles from one medium to another causes problems.
* create generic smt_convert [TEST] that can be looped over to produce logical
  variants of results.
  problems with smt_convert:
  - f for force and f for filter collide
  - s for tilesize is unintuitive when --imagesize has no short option
* thought was to crop an area from an existing map, would be based on minimum
  size, i.e., metalmap dimensions or something.
* Work through the smf_ and smt_ tools to figure out the best set of cmd lines
  to cover all code paths. at each if statement I'm thinking
* smt_convert detect output format from file extension
* smt_convert, output image in all formats


Proving Worth
=============
what sort of things can I do to differentiate myself from the mapconv crowd?
* tile based terrain using tiled, so resurrect westlands and show a timelapse
  of creating a map using tiled and {smf,smt}_tools
* recompress existing map, show archive size differences
* recompress existing map, change size
what sort of actions does a typical mapper take that I can show that I can do
* quick and dirty video tutorial for making maps for spring.
 - show interspersed regular footage with voiceover + timelapse with no breaks,
   and a timer on the footage.
